package com.bytelegend.utils

import com.bytelegend.app.shared.GridSize
import com.bytelegend.app.shared.PixelSize
import com.bytelegend.app.shared.TileSheetInfo
import java.io.File
import javax.imageio.ImageIO

/**
 * Read all files ending with "_WIDTHxHEIGHT.png" from server/src/main/resources/static/img/tiles,
 * and generates a Kotlin file "client/common/src/main/kotlin/generated/TileSheets.kt
 */
fun main() {
    generateTileSheetData(
        File("server/app/src/main/resources/static/img/tiles"),
        File("client/common/src/main/kotlin/generated/TileSheets.kt")
    )
}

fun generateTileSheetData(srcDir: File, destJsonFile: File) {
    val pattern = """.*_\d+x\d+.png""".toRegex()
    val tileSheets = srcDir
        .listFiles { _, name -> name.matches(pattern) }
        .map(::readImage)

    val ktSource = """
        package generated
        import com.bytelegend.app.shared.TileSheetInfo
        import com.bytelegend.app.shared.GridSize
        import com.bytelegend.app.shared.PixelSize
        
        /*** NOTE: DO NOT EDIT THIS FILE MANUALLY AS IT IS AUTO GENERATED, SEE GenerateTileSheetData.kt ***/
        
        val tileSheets = listOf( 
            ${tileSheets.joinToString(",\n            ") { it.toKotlinCode() }}
        )
    """.trimIndent()

    destJsonFile.writeText(ktSource)
}

fun readImage(tileSheetImg: File): TileSheetInfo {
    val pattern = """(.*_(\d+)x(\d+)).png""".toRegex()
    val result = pattern.find(tileSheetImg.name)!!
    val tileSheetId = result.groupValues[1]
    val tileSize = PixelSize(result.groupValues[2].toInt(), result.groupValues[3].toInt())
    val img = ImageIO.read(tileSheetImg)
    require(img.width % tileSize.width == 0) { "Invalid $tileSheetImg: image width ${img.width} tile width: ${tileSize.width}" }
    require(img.height % tileSize.height == 0) { "Invalid $tileSheetImg: image height ${img.height} tile height: ${tileSize.height}" }

    return TileSheetInfo(
        tileSheetId,
        tileSheetImg.length().toInt(),
        tileSize,
        GridSize(img.width / tileSize.width, img.height / tileSize.height)
    )
}

